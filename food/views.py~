from django.shortcuts import render
from .forms import FoodForm
from django.views.generic.edit import UpdateView
from django.template import loader
from .models import Food
from django.http import HttpResponse
import urllib

# Create your views here.

def IndexView(request):
    return render(request, 'food/index.html')


def create_notes(request):
    form = FoodForm(request.POST or None, request.FILES or None)
    if form.is_valid():
        food = form.save(commit=False)
        food.save()
        return render(request, 'food/detail.html', {'food': food})
    context = {
        "form": form,
    }
    return render(request, 'food/create_notes.html', context)

class modify_notes(UpdateView):
    model = Food
    fields = ['cook_name', 'cook_cat', 'tag' ,'cook_ing', 'info_text',  'pic_file' ]
    template_name_suffix = '_update_form'

def delete_notes(request, food_id):
    n = Food.objects.get(pk=food_id)
    n.delete()
    return render(request, 'food/index.html')

def DetailView(request, pk):
    template= loader.get_template("food/detail.html")
    food = Food.objects.get(pk=pk)
    context = {
        'food': food,
        'pk': pk,
    }
    return HttpResponse(template.render(context, request))


def RecipeView(request):

    all_data = Food.objects.all()

    all_cook_cat_temp = list(Food.objects.all().values_list('cook_cat').distinct())
    all_cook_cat = [(e[0], urllib.parse.quote(e[0])) for e in all_cook_cat_temp]

    template = loader.get_template('food/recipe_view.html')
    context = {
        'all_data': all_data,
        'all_cook_cat': all_cook_cat,
    }
    return HttpResponse(template.render(context, request))

def RecipeIngView(request):

    all_data = Food.objects.all()

    all_cook_ing_temp = list(Food.objects.all().values_list('cook_ing').distinct())

    all_cook_ing = []
    for e in all_cook_ing_temp:
        a = e[0].split("，")
        for e1 in a:
            if e1 not in all_cook_ing:
                all_cook_ing.append((e1,urllib.parse.quote(e1) ))

    template = loader.get_template('food/by_ing_view.html')
    context = {
        'all_data': all_data,
        'all_cook_ing': all_cook_ing,
    }
    return HttpResponse(template.render(context, request))

def RecipeTagView(request):

    all_data = Food.objects.all()

    all_tag_temp = list(Food.objects.all().values_list('tag').distinct())
    print(all_tag_temp )
    all_tag = []
    for e in all_tag_temp:
        a = e[0].split("，")
        for e1 in a:
            if e1 not in all_tag:
                all_tag.append((e1,urllib.parse.quote(e1) ))

    template = loader.get_template('food/by_tag_view.html')
    context = {
        'all_data': all_data,
        'all_tag': all_tag,
    }
    return HttpResponse(template.render(context, request))

def RecipeSubView(request, search_type, search_value):

    search_value = urllib.parse.unquote(search_value)

    if search_type == "cook_cat":
        all_data = Food.objects.filter(cook_cat = search_value) 

    if search_type == "cook_ing":
        all_data = Food.objects.filter(cook_ing__icontains = search_value) 	

    if seartch_type == "tag":
        all_data = Food.objects.filter(tag__icontains = search_value) 	

    template = loader.get_template('food/recipe_sub_view.html')
    context = {
        'all_data': all_data,
        'search_value': search_value
    }
    return HttpResponse(template.render(context, request))
